import numpy as np
from scipy.linalg import lstsq as theta_calc

data = np.loadtxt('housing.data')

# MSE Function
def MSE(y,X,theta):	
	MSE = float(sum((y-dot(X, theta))**2) / len(y))
	return MSE
	

# Slicing
y = data[:,-1]  #Outputs (labels)
half = len(y)/2

print '\nHave a dataset of %d data points' % len(y)

# Shortcuts
dot = np.dot	#Multiplier
inv = np.linalg.inv #Inversor

# Dummy features
Bias = np.ones((506,1))	#Bias term vector

# Fitting the parameters: theta = (X'*X)^-1*X'*y
# Computing the average of the target value
theta = dot(dot(inv(dot(Bias.T, Bias)), Bias.T), y)

# MSE = (1/N)*sum((y-X*theta)^2)
# Computing MSE obtained using it as a constant prediction
print 'MSE as a constant prediction: ' , MSE(y,Bias,theta)


# Splitting data in 50/50 for training and testing
print 'Splitting...'

#Training 
data_train = data[:half,:-1]	#Training features

output_train = data[:half,-1]	#Training labels

#Testing
data_test = data[half:,:-1]		#Testing features

output_test = data[half:,-1]	#Testing labels

# Training a linear regressor model
print '\nTraining with each variable individually...'

list_mse=[]
list_theta=[]
for i in range(0,len(data[0])-1):
    training_features = np.hstack((Bias[:half], data_train[:,i].reshape(half,1)))	#Stack feature array (vector) with Bias term
    list_theta.append(theta_calc(training_features,output_train)[0])				
    list_mse.append(MSE(output_train,training_features,list_theta[i]))		#Save every MSE for each theta to a list

print '\nThe variable %d is the most informative one, getting a MSE of:' % list_mse.index(min(list_mse)), min(list_mse)

# Testing the linear regressor model
print '\nTesting with each variable individually... \n'

list_mse_testing=[]
for i in range(0,len(data[0])-1):
    testing_features = np.hstack((X[:half], data_test[:,i].reshape(half,1)))
		list_mse_testing.append(MSE(output_test,testing_features,list_theta[i]))
    
print '\nThe most generalizable variable is:', list_mse.index(min(list_mse)), 'getting a MSE of:', min(list_mse)
print '\nThe worst generalizable variable is:', list_mse.index(max(list_mse)), 'getting a MSE of:', max(list_mse)
